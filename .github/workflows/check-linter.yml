name: Check ‚Äì Lint

on:
    pull_request:
        types: [opened, synchronize, reopened]
        branches:
            - main

jobs:
    setup:
        name: üõ†Ô∏è Setup
        runs-on: ubuntu-latest
        outputs:
            node-version: 22.14.0
            pnpm-version: 10.6.3
        steps:
            - name: üì• Checkout repository
              uses: actions/checkout@v4

            - name: üîß Setup Node.js and pnpm
              uses: ./.github/actions/setup-node-pnpm
              with:
                  node-version: 22.14.0
                  pnpm-version: 10.6.3

            - name: üìÅ Get pnpm store directory
              id: pnpm-cache
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

            - name: üì¶ Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: üìö Install dependencies
              run: pnpm install --no-frozen-lockfile

            - name: üíæ Cache workspace
              uses: actions/cache@v3
              with:
                  path: .
                  key: workspace-${{ github.sha }}

    lint-check:
        name: Lint Check
        runs-on: ubuntu-latest
        needs: [setup]
        outputs:
            node-version: 22.14.0
            pnpm-version: 10.6.3
        steps:
            - name: Checkout repo
              uses: actions/checkout@v4

            - name: üîß Setup Node.js and pnpm
              uses: ./.github/actions/setup-node-pnpm
              with:
                  node-version: 22.14.0
                  pnpm-version: 10.6.3

            - name: Install dependencies
              run: pnpm install --no-frozen-lockfile

            - name: üîç Run ESLint
              run: pnpm lint

            - name: Run ESLint (non-blocking)
              id: eslint
              run: |
                  echo "::group::ESLint"
                  pnpx eslint . --ext .ts,.tsx > eslint-output.txt || true
                  echo "::endgroup::"

            - name: Comment (or update) PR with lint summary
              if: github.event.pull_request
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GB_TOKEN }}
                  script: |
                      const fs = require('fs');

                      const readOutput = (file, title) => {
                        const content = fs.existsSync(file) ? fs.readFileSync(file, 'utf8').trim() : '';
                        return content
                          ? `### ‚ùå ${title} found issues:\n\n\`\`\`\n${content.slice(0, 3000)}\n\`\`\`\n`
                          : `### ‚úÖ ${title} passed without issues.\n`;
                      };

                      const eslint = readOutput('eslint-output.txt', 'ESLint');

                      const body = [
                        '<!-- lint-check -->',
                        '## üõ† R√©sultats des v√©rifications :',
                        '',
                        eslint,
                        '\n_Note : les erreurs n‚Äôemp√™chent pas le merge, mais merci de les corriger._'
                      ].join('\n');

                      const { owner, repo } = context.repo;
                      const issue_number = context.issue.number;

                      const { data: comments } = await github.rest.issues.listComments({
                        owner,
                        repo,
                        issue_number,
                        per_page: 100
                      });

                      const existing = comments.find(c =>
                        c.user?.type === 'Bot' &&
                        c.body?.includes('<!-- lint-check -->')
                      );

                      if (existing) {
                        await github.rest.issues.updateComment({
                          owner,
                          repo,
                          comment_id: existing.id,
                          body
                        });
                        core.info(`Commentaire Lint mis √† jour (#${existing.id})`);
                      } else {
                        await github.rest.issues.createComment({
                          owner,
                          repo,
                          issue_number,
                          body
                        });
                        core.info('Nouveau commentaire Lint cr√©√©');
                      }
