name: Lighthouse CI

on:
    pull_request:
        types: [opened, synchronize, reopened]
        branches:
            - main

jobs:
    lighthouse:
        name: Audit Lighthouse CI

        runs-on: ubuntu-latest

        env:
            VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
            VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: ðŸ”§ Setup Node.js and pnpm
              uses: ./.github/actions/setup-node-pnpm
              with:
                  node-version: 22.14.0
                  pnpm-version: 10.6.3
            - run: pnpm install --no-frozen-lockfile
            - run: pnpm build
            - name: Run Lighthouse CI
              run: pnpx @lhci/cli autorun --config=./lighthouserc.json || echo "LHCI failed!"

            - name: Upload Lighthouse reports
              uses: actions/upload-artifact@v4
              with:
                  name: lighthouse-report
                  path: lhci-report/

            - name: Comment (or update) PR with Lighthouse summary
              if: github.event.pull_request
              uses: actions/github-script@v7
              env:
                  PREVIEW_URL: "https://metemotion.onrender.com"
              with:
                  github-token: ${{ secrets.GH_TOKEN }}
                  script: |
                      const fs = require('fs');
                      const { owner, repo } = context.repo;
                      const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;

                      const path = './lhci-report/manifest.json';
                      const summary = JSON.parse(fs.readFileSync(path, 'utf8'));

                      const toEmoji = (score) => {
                        const percent = Math.round(score * 100);
                        if (percent >= 90) return 'ðŸŸ¢';
                        if (percent >= 50) return 'ðŸŸ ';
                        return 'ðŸ”´';
                      };

                      const formatScore = (value) => Math.round(value * 100);

                      const makeRow = (entry) => {
                        const { url, summary: s } = entry;
                        const path = new URL(url).pathname;
                        return `| [\`${path}\`](${url}) | ${toEmoji(s.performance)} ${formatScore(s.performance)} | ${toEmoji(s.accessibility)} ${formatScore(s.accessibility)} | ${toEmoji(s['best-practices'])} ${formatScore(s['best-practices'])} | ${toEmoji(s.seo)} ${formatScore(s.seo)} |`;
                      };

                      const rows = summary.map(makeRow).join('\n');

                      const legend = `ðŸ”´ <50 (Ã  amÃ©liorer) | ðŸŸ  50â€“89 (moyen) | ðŸŸ¢ â‰¥90 (bon)`;

                      const body = [
                        '## ðŸ“Š Lighthouse report',
                        '',
                        '| Page | Performance | Accessibility | Best Practices | SEO |',
                        '|------|-------------|----------------|----------------|-----|',
                        rows,
                        '',
                        legend,
                        '',
                        `ðŸ“Ž [Consulter le rapport complet (actions)](${runUrl})`
                      ].join('\n');

                      await github.rest.issues.createComment({
                        owner,
                        repo,
                        issue_number: context.issue.number,
                        body
                      });
