name: Lighthouse CI

on:
    pull_request:
        types: [opened, synchronize, reopened]
        branches:
            - main

jobs:
    lighthouse:
        name: Lighthouse CI
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "22"

            - name: Setup pnpm
              uses: pnpm/action-setup@v4

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build application
              run: pnpm build

            - name: Start preview server and wait
              run: |
                  pnpm preview &
                  sleep 15
                  curl -f http://localhost:4173 || exit 1

            - name: Run Lighthouse CI
              run: pnpm lighthouse:ci

            - name: Stop preview server
              run: pkill -f "vite preview" || true

            - name: Upload Lighthouse results
              uses: actions/upload-artifact@v4
              with:
                  name: lighthouse-report
                  path: ./lhci-report/

            - name: Comment PR with Lighthouse summary
              if: github.event.pull_request
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const fs = require('fs');
                      const core = require('@actions/core');
                      const { owner, repo } = context.repo;
                      const issue_number = context.issue.number;
                      const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;

                      const manifestPath = './lhci-report/manifest.json';

                      if (!fs.existsSync(manifestPath)) {
                        core.warning('Lighthouse manifest not found');
                        return;
                      }

                      try {
                        const summary = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));

                        const toEmoji = score => {
                          const pct = Math.round(score * 100);
                          if (pct >= 90) return 'ðŸŸ¢';
                          if (pct >= 50) return 'ðŸŸ ';
                          return 'ðŸ”´';
                        };

                        const pct = v => Math.round(v * 100);

                        const rows = summary
                          .map(({ url, summary: s, htmlPath }) => {
                            const pathname = new URL(url).pathname;
                            const liveUrl = url;
                            return `| [\`${pathname}\`](${liveUrl}) | ${toEmoji(s.performance)} ${pct(s.performance)} | ${toEmoji(s.accessibility)} ${pct(s.accessibility)} | ${toEmoji(s['best-practices'])} ${pct(s['best-practices'])} | ${toEmoji(s.seo)} ${pct(s.seo)} |`;
                          })
                          .join('\n');

                        const body = [
                          '<!-- lhci-report -->',
                          '## ðŸ“Š Lighthouse report',
                          '',
                          `*Workflow run: [link](${runUrl})*`,
                          '',
                          '| Page | Performance | Accessibility | Best Practices | SEO |',
                          '|------|-------------|----------------|----------------|-----|',
                          rows
                        ].join('\n');

                        const { data: comments } = await github.rest.issues.listComments({
                          owner,
                          repo,
                          issue_number,
                          per_page: 100
                        });

                        const existing = comments.find(c =>
                          c.user?.type === 'Bot' &&               
                          c.body?.includes('<!-- lhci-report -->')
                        );

                        if (existing) {
                          await github.rest.issues.updateComment({
                            owner,
                            repo,
                            comment_id: existing.id,
                            body
                          });
                          core.info(`Comment updated: #${existing.id}`);
                        } else {
                          await github.rest.issues.createComment({
                            owner,
                            repo,
                            issue_number,
                            body
                          });
                          core.info('New comment created');
                        }
                      } catch (error) {
                        core.error(`Failed to process Lighthouse results: ${error.message}`);
                        throw error;
                      }
