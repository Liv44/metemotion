name: GreenFrame audit

on:
    pull_request:
        types: [opened, synchronize, reopened]
        branches:
            - main

jobs:
    greenframe:
        name: GreenFrame CO‚ÇÇ audit
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: üîß Setup Node.js and pnpm
              uses: ./.github/actions/setup-node-pnpm
              with:
                  node-version: 22.14.0
                  pnpm-version: 10.6.3

            - name: Install GreenFrame CLI
              run: curl https://assets.greenframe.io/install.sh | bash

            - name: Lancer GreenFrame sur plusieurs pages
              run: |
                  BASE_URL="https://metemotion.onrender.com"
                  echo "üå± Test de l‚ÄôURL base : $BASE_URL"

                  PAGES=("/")
                  mkdir greenframe-reports

                  for path in "${PAGES[@]}"; do
                    SAFE_NAME=$(echo "$path" | sed 's|/|_|g')
                    FULL_URL="${BASE_URL%/}${path}"
                    echo "‚û°Ô∏è Analyse de ${FULL_URL}"

                    greenframe analyze "$FULL_URL" --json > "greenframe-reports/${SAFE_NAME}.json" || echo "{\"error\":\"√âchec pour $FULL_URL\"}" > "greenframe-reports/${SAFE_NAME}.json"
                  done

            - name: Poster ou mettre √† jour le commentaire PR
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GH_TOKEN }}

                  script: |
                      const fs = require('fs');
                      const path = require('path');
                      const { owner, repo } = context.repo;
                      const issue_number = context.issue.number;
                      const baseUrl = process.env.BASE_URL;

                      const files = fs.readdirSync('./greenframe-reports');
                      let body = [
                        '<!-- greenframe-report -->',
                        '## üåø Rapport GreenFrame multipage',
                        `üîó Base URL : [${baseUrl}](${baseUrl})`,
                        ''
                      ];

                      for (const file of files) {
                        const json = JSON.parse(fs.readFileSync(path.join('./greenframe-reports', file), 'utf8'));
                        const page = file.replace('.json', '').replace(/_/g, '/') || '/';

                        if (json.error) {
                          body.push(`### ‚ùå ${page}\n- ${json.error}`);
                          continue;
                        }

                        const grams = json.co2?.grams ?? 0;
                        const emoji = grams < 0.5 ? 'üü¢' : (grams < 1 ? 'üü†' : 'üî¥');

                        body.push(`### ${page}`);
                        body.push(`- CO‚ÇÇ estim√© : **${grams.toFixed(2)}g** ${emoji}`);
                        body.push(`- Chargement simul√© : ${json.steps?.length ?? '?'} √©tapes`);
                        body.push('');
                      }

                      body.push('_Analyse r√©alis√©e avec [GreenFrame](https://greenframe.io)_');

                      const finalComment = body.join('\n');

                      const { data: comments } = await github.rest.issues.listComments({
                        owner,
                        repo,
                        issue_number,
                        per_page: 100
                      });

                      const existing = comments.find(c =>
                        c.user?.type === 'Bot' && c.body?.includes('<!-- greenframe-report -->')
                      );

                      if (existing) {
                        await github.rest.issues.updateComment({
                          owner,
                          repo,
                          comment_id: existing.id,
                          body: finalComment
                        });
                        core.info("üîÅ Commentaire mis √† jour");
                      } else {
                        await github.rest.issues.createComment({
                          owner,
                          repo,
                          issue_number,
                          body: finalComment
                        });
                        core.info("üÜï Nouveau commentaire ajout√©");
                      }
              env:
                  BASE_URL: "https://metemotion.onrender.com"
